面经试题积累：

兄弟间节点通信?
vue要在更新渲染前如何执行回调?
web安全?
webpack？（暂时没了解）
sass for循环找到父节点，插入类?（并不了解sass）

1，f（）调用一次输出1，第二次调用输出2
2，m的n次方优化


1. 盒子模型的2种
2. url输入到显示越具体越好
3. http2？
4. event loop
5. 闭包
6. http状态码
7. 304的etag和last-modify
8. css选择器优先级
9. 跨域
10. loclaStorage和sessionStorage

前端知识点汇总
前端知识点是我在准备秋招过程中，看书和经验贴中总结到的一些知识点，不仅面试中经常问到，同时对于自己未来的工作和学习也很重要，也欢迎大家一起补充～
一、JavaScript
1. 原始值和引用值类型及区别
2. 判断数据类型typeof、instanceof、Object.prototype.toString.call()、constructor
3. 类数组与数组的区别与转换
4. 数组的常见API
5. bind、call、apply的区别
6. new的原理
7. 如何正确判断this？
8. 闭包及其作用
9. 原型和原型链
10. prototype与__proto__的关系与区别
11. 继承的实现方式及比较
12. 深拷贝与浅拷贝
13. 防抖和节流
14. 作用域和作用域链、执行期上下文
15. DOM常见的操作方式
16. Array.sort()方法与实现机制
17. Ajax的请求过程
18. JS的垃圾回收机制
19. JS中的String、Array和Math方法
20. addEventListener和onClick()的区别
21. new和Object.create的区别
22. DOM的location对象
23. 浏览器从输入URL到页面渲染的整个流程（涉及到计算机网络数据传输过程、浏览器解析渲染过程）
24. 跨域、同源策略及跨域实现方式和原理
25. 浏览器的回流（Reflow）和重绘（Repaints）
26. JavaScript中的arguments
27. EventLoop事件循环
28. 宏任务与微任务
29. BOM属性对象方法
30. 函数柯里化及其通用封装
31. JS的map()和reduce()方法
32. “==”和“===”的区别
33. setTimeout用作倒计时为何会产生误差？
二、ES6
1. let、const和var的概念与区别
2. 变量提升与暂时性死区
3. 变量的结构赋值
4. 箭头函数及其this问题
5. Symbol概念及其作用
6. Set和Map数据结构
7. Proxy
8. Reflect对象
9. Promise（手撕Promise A+规范、Promise.all、Promise相关API和方法）
10. Iterator和for...of（Iterator遍历器的实现）
11. 循环语法比较及使用场景（for、forEach、for...in、for...of）
12. Generator及其异步方面的应用
13. async函数
14. 几种异步方式的比较（回调、setTimeout、Promise、Generator、async）
15. class基本语法及继承
16. 模块加载方案比较（CommonJS和ES6的Module）
17. ES6模块加载与CommonJS加载的原理
三、HTML/CSS
1. CSS权重及其引入方式
2. <a></a>标签全部作用
3. 用CSS画三角形
4. 未知宽高元素水平垂直居中（方案及比较）
5. 元素种类的划分
6. 盒子模型及其理解
7. 定位方式及其区别（文档流）
8. margin塌陷及合并问题
9. 浮动模型及清除浮动的方法
10. CSS定位属性
11. display及相关属性
12. IFC与BFC
13. 圣杯布局和双飞翼布局的实现
14. Flex布局
15. px、em、rem的区别
16. Less预处理语言
17. 媒体查询
18. vh与vw
19. H5的语义化作用及语义化标签
20. Web Worker和Web Socket
21. CSS3及相关动画
22. 如何实现响应式布局
23. SEO的概念及实现
24. HTML5的新特性
25. Less和Sass使用
四、HTTP与计算机网络
1. TCP/IP协议分层管理
2. 三次握手四次挥手机制及原因
3. HTTP方法
4. GET和POST的区别
5. HTTP建立持久连接的意义
6. HTTP报文的结构
7. HTTP状态码
8. Web服务器及其组成
9. HTTP报文首部
10. HTTP通用首部字段
11. HTTP请求首部字段、响应首部字段、实体首部字段
12. Cookie相关首部字段
13. HTTPS与HTTP区别及实现方式
14. Cookie与Session
15. 基于HTTP的功能追加协议（SPY、WebSocket、HTTP）
16. 常见的Web攻击分类
17. TCP与UDP区别
18. 存储机制localStorage、sessionStorage与Cookie存储技术
19. XSS攻击及防御
20. CSRF攻击及防御
五、前端工程化
1. 前端工程化的流程（架构选型、业务开发、测试、打包构建、部署上线、项目监控）
2. Webpack基本概念与配置
3. loader与plugin原理与实现
4. Webpack的模块热替换及实现
5. Webpack的优化问题
7. SSR实现及优缺点
8. 设计模式（工厂模式、单例模式、原型模式、代理模式、适配器模式、观察者模式等...）
六、React
1. React自身特点及选型时考虑
2. React与VUE的异同
3. Virtual DOM
4. React生命周期
5. Diff算法
6. 受控组件与非受控组件
7. 高阶组件
8. Flux架构模式（涉及MVC/MVVM、Flux）
9. Redux设计概念、设计原则、方法、redux实现异步流的库
10. 纯组件（Pure Component）与shouldComponentUpdate关系
11. Redux中的<Provider/>组件与connect函数
12. React Fiber架构
13. React Hooks的作用及原理
七、NodeJS
1. NodeJS基本概念与特点
2. CommonJS规范、核心模块
3. Node的异步I/O
4. Node的内存控制
5. Node构建网络服务（TCP、HTTP、Web Socket服务等）
6. Node的进程
八、需要会手撕的代码部分
1. Promise（A+规范）、then、all方法
2. Iterator遍历器实现
3. Thunk函数实现（结合Generator实现异步）
4. async实现原理（spawn函数）
5. class的继承
6. 防抖和节流
7. Ajax原生实现
8. 深拷贝的几种方法与比较
9. 继承的几种实现与比较
10. 未知宽高的元素水平垂直居中
11. 三栏布局的实现
12. 两栏布局的实现
13. React高阶组件
14. 数组去重
15. 几种排序算法的实现及其复杂度比较
16. 前序后序遍历二叉树（非递归）
17. 二叉树深度遍历（分析时间复杂度）
18. 跨域的实现（JSONP、CORS）
九、数据可视化
1. Canvas和SVG的区别
2. 在考虑设计可视化图表时，结合Canvas和SVG特性会怎么取舍
3. 常见的可视化组件库
4. 可视化组件库如Echarts的设计思路
5. 一些偏向底层的可视化组件库和前端框架结合方面需要考虑哪些问题
6. 可视化组件如何做到数据驱动？
十、计算机基础
1. 计算机系统
2. 线程与进程
3. 常见的git指令
4. Linux相关指令
5. 其他类型的编程语言（如Java）
6. 数据库
前端面试题汇总
前端面试题是我面试过程中遇到的面试题，每一次面试后我都会复盘总结。因为我每次都发在牛客上，所以具体可以看我之前的帖子哈
面试经验汇总
面试经验汇总是我在秋招和面试过程中的一点体会和总结，每个人的学习方法和调整心态的方式不一样，也仅供参考哈～
看过的书籍
1. 《JavaScript高级程序设计》――红宝书。多看几遍，其意自现
2. 《高性能JavaScript》――很不错的书，在性能方面多多考虑
3. 《JavaScript语言精粹》――提纲挈领，花费时间较少加深印象
4. 《你不知道的JavaScript（上中下）》――据说很精彩，还没看多少
5. 《ES6标准入门》――必看
6. 《深入React技术栈》――部分章节介绍很精彩，但v16以后需要自己看文档
7. 《深入浅出NodeJS》――后端部分也很重要，还没看完
8. 《DOM编程艺术》――没看多少
9. 《图解HTTP》――浅显易懂介绍HTTP，可结合博客深入理解
10. 《剑指offer》――题目都要刷一遍以上才行
11. 《数据之美》――数据可视化入门书籍
12. 《数据可视化的基本原理与方法》――数据可视化的一些原理知识
一、心态
求职过程中，个人认为最重要的是心态的保持，秋招其实是一个周期很长的过程，从开始的复习准备到参加笔试面试到最后的等待结果，难免会经历挫折和打击，但是心态对复习状态和面试表现影响真的很大，所以心态是首先需要注意的问题（我自己在7月和8月挂过很多，中间一度很焦虑，懂的同学都懂）。下面是我想到的一些小tips，可以看看

1. 在准备笔试面试的复习阶段，可以对自己有高一点的期待，适当订一些意向公司，好好准备面试题，知识点等
2. 开始笔试面试初期，经常会很紧张，不知道该怎么回答，所以最好的办法就是多参加，积累经验
3. 笔试面试逐渐多起来之后，经常会陷入焦虑，患得患失。这个时候需要降低自己的期望，不要考虑太远的目标，每天制定计划，目光关注在当天的任务，甚至以半天为单位，按部就班复习（解决焦虑的最好办法就是行动）
4. 和同学多交流吐槽，适当发泄

我个人的心态转变是在挂了网易的面试之后，之前基本就是面一个挂一个，心态一度很崩溃，但是也没有办法。挂完网易后，晚上和实验室的同学出去吃了一顿饭，聊了很多，之后心态就放开了，佛系了，一切随缘。。在那之后的面试反而基本面一个过一个（可能也因为复习整理了一段时间）
二、方向选择
因为读研期间，老师的项目可能对自己的求职方向和技术栈都有一定影响，所以需要提前确定自己的工作方向，并且安心的复习准备。最好不要想着我同时准备A和B，如果A形式不好，就找B。这样可能会导致分心，A和B准备的都不充分。

如果在工作方向之间有纠结的话（如A和B），不妨可以尝试权重法，自己列举方向A和B对你来说，优势在哪，权重多大，然后比较。比如我更喜欢A，有xxx经历，A权重加20分。B的行业需求更大，B权重加5。个人在A和B的核心竞争力多少。。自己根据自己的情况评估。
三、面试技巧
1. 个人自我介绍一般可以分为三个部分：自己的个人情况（姓名、学校、年级等）+特殊的经历及收获（项目、比赛、实习）+对应聘公司的理解（为什么要来，如何结合部门的业务谈谈自己的能力和业务的匹配更好）

2. 面试题会的就说，如果有准备比较充分，可以多说一点，埋一点坑，一般面试官会顺着往下问。如果完全不会，就说自己没了解过。不太确定的，可以先和面试官说自己不太确定，然后说一下自己认为的答案

3. HR面的一些比较常见的问题，可以提前找一找，准备适合自己情况的回答

4. 有的时候，提前了解一下自己投递的部门的业务，并结合自己的知识谈一谈自己的理解和认识，会有意想不到的效果

5. 面试提问环节，一般前两面都是部门内的leader或者同事面试，所以我都会问一些部门的业务方面的问题，并且结合自己的理解聊一下。如果是交叉面或者部长面，我会问一下从面试和简历，他们对我的今后学习的建议（一般都会对你面试进行评价，这时你应该就能感觉出来自己能不能过了，然后面试官给出建议），因为部长面和交叉面，面试官的层次和眼界更高，单纯的问技术方面的问题，其实不如问一些对自己的职业方向建议的问题，这样可能收益更大。不建议直接询问面试结果，因为一方面面试官不会说，第二方面会显得心虚。最后HR面我只会问后续的通知时间。



作者：真真、喵
链接：https://www.nowcoder.com/discuss/207553?type=post&order=time&pos=&page=1
来源：牛客网

2.状态码：4开头、3开头、2开头
3.浏览器缓存、强制缓存、协商缓存
4.content-type：From-data、json等 及其之间的区别
5.描述跨域请求、解决方案：CORS，Nginx反向***
6.本地存储缓存的方法：cookie、sessionStorage、localStorage 及其区别，是否可以跨域获取缓存
7.node和npm的区别，node指令读文件
8.原型、原型链的区别
9.Promise()
10.函数的节流
11.vue和react的数据流
12.redux的原理 APPdispatch store。。。
13.移动端原生代码屏幕适配
14.代码：链表反转、数组反转
15.module.export exports export的区别
16.代码：判断空对象为空的方法，大约是写出隐式转换的底层代码
17.H5 request.animation.frame
18.webpack都用过哪些loader和plugin，说的vue-loader，又问vue-loader经过转换成了什么格式



1、自我介绍
2、css盒模型
3、float属性
4、css优先级
5、平时哪里会用到伪类选择器
6、浏览器HTML怪异模式和标准模式渲染有啥不同？？？
7、同源策略确定
8、如何实现跨域请求
9、promise对象，怎么用
10、TCP与UDP的区别
11、vue生命周期
12、父子组件通信
13、Vuex的理解
14、Vue双向绑定原理
15、cookie和sessionStorage和localStorage的区别（着重问了cookie）
16、如何用正则匹配一个ip地址
17、最近一两年前端的规划是什么？具体规划…
18、链表与数组的区别
19、完全二叉树与满二叉树的区别
20、重绘与回流的区别，有什么关系
21、JS的继承有了解吗？



IP是多少位二进制？两个IP地址有一个子网掩码，怎么判断是不是处于同一网段
a=function b=a 请问a跟b相等吗
追问：如果b=a.bind()呢
伪类和伪元素的区别
如何实现资源的预加载，dns没说上来
栈和堆（说说大堆小堆，这个不会）
二分查找是什么，使用场景
从一段英文单词中，找出出现次数最多的前10个单词
经过一个公交站，一小时去公交站概率p，三个小时经过公交站的概率
如何判断一个IP地址
2(5[0-5]|[0-4]\d) 匹配：200 ~ 255
[0-1]?\d{1,2} 匹配：0 ~ 199
(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}

自我介绍
请问在大学期间参与过什么学生组织呢？有什么收获？（学习到如何融入集体与大家共同交流，团队合作，能力的锻炼）
可以谈谈自己大学期间的表现吗？
可以介绍一下自己的性格特点吗？
click在ios上有300ms延迟，原因及如何解决？
数组中的逆序对
用两个栈实现队列
请你讲讲http1.1和1.0的区别
画一条0.5px的线
数组中只出现一次的数字
冒泡的阻止事件
排序算法的时间复杂度和空间复杂度

-----2020/02/28（需掌握的知识）

Vuex 状态机更新机制
排序算法知道多少种？适用场景是什么（有序性，数据规模，稳定性等）？冒泡什么时候复杂度最高？
让你做一个日历组件的思路，你觉得里面用到了哪些算法知识，核心功能是什么。在项目中用其他组件或者库用的多吗？
301 和 302 区别？ 304 含义？304 原理？501 和 502 区别？
git 用过是吧，git pull 和 git fetch 区别？哪个命令可以重命名分支？
前端打包工具都用过哪些，除了 webpack 呢？webpack 和 gulp有什么不同？
淘宝的 flexiable 和 rem
js规范
正则匹配网址
兼容怎么做
二叉树
webpack的优化方式 用途? 
如果有10个js 只用到了1个 怎么打包优化? 
用到的loader 继承方式? 
es6的特性? 
es6的类中静态属性和构造函数谁先加载 为什么? 
静态属性和方法是类的还是实例的? 
怎么在外部调用静态属性? 
mongdb是关键型库吗? 
移动端适配方案有哪些? 
nodejs中的process.nextTick什么时候执行
margin  使用百分数
$documnent.ready()? VS? window.onload()?两种方式的区别（哪个先执行）
常见的git命令
动画的具体属性
vue和react的区别
canvas 和 svg的区别
vue如何检测ui变化的
localStorage冲突解决
对称和非对称加密 以及应用场景
两个有序数组 怎么找到相同的元素? 
js异或
Gulp 做了什么事情？与 Webpack 你觉得有什么区别？
前端模块化的理解，优势
如果数据量很大，连localStorage都保存不了，应该怎么办？
IP是多少位二进制？两个IP地址有一个子网掩码，怎么判断是不是处于同一网段
304
最后一种ifram+document.domain怎么实现
判断arr是不是数组
伪类和伪元素的区别
如何实现资源的预加载，dns没说上来
栈和堆 大堆小堆
cookie，localStorage和sessonStorage区别，使用场景
二分查找是什么，使用场景
从一段英文单词中，找出出现次数最多的前10个单词
经过一个公交站，一小时去公交站概率p，三个小时经过公交站的概率
如何判断一个IP地址
数组和链表的区别
闭包垃圾回收机制
+obj
可不可以直接A.prototype?=?B
 git 缓存区工作区
虚拟DOM diff 发散一下思维
node 中的js和浏览器中的js区别，从区别，相同，性能，分析？
(上面提到了promise的polyfill)promise介绍下？
promise，以前的异步回调以及其他解决异步的区别？
目前的小程序和H5的区别，从性能，渲染方式来说？
html css 实现弹出块, 从语义, 用户体验考虑
Vue从哪个版本开始接触的, 有了解过1.0吗, 他们之间对比？- 指令, 生命周期
淘系目前前端整体的架构选型偏向于哪个框架或者库?


对 CSS3、HTML5、Http1.0 ～ 2.0、Javascript ES5 ～ ES7、TypeScript、React、Redux、Flux、Mobx、NodeJS 等主流前端技术栈有全面、深入的理解；
对 W3C、TC39 等国际标准化组织在前端领域和浏览器的标准有全面的了解；
对主流浏览器内核、脚本引擎和前端技术领域相关部分的技术有全面的了解，对内核、脚本引擎未来发展趋势有自己的理解和预判；
聪明好学、自驱动、能够良好规划自己的成长路径，有清晰明确的职业生涯规划和技术提升目标，在项目遇到瓶颈有奉献和牺牲精神；
英语听说写能力优秀的优先。

在js里面0.1+0.2等于0.3吗为什么，如果让你设计一个函数可以实现浮点类型的精确运算你如何设计，说一下核心思路
响应式中observe还有dep还有wather各自都分担什么任务
vue各版本的优劣
页面渲染css失效
12个小球问题，一个天平，12个小球中有一个球是不合格的（不知道大小），如何用最少的次数筛选出来（天平每次放置球的个数没有限制）
双飞翼一定是最合适的吗
如何实现大数相乘，说一下核心思路

如何用正则匹配一个ip地址


作者：bbbingo
链接：https://www.nowcoder.com/discuss/370253?type=2
来源：牛客网

css引入方式
三列等宽布局怎么实现
追问：怎么让元素在同一行
追问：有没有注意过inline-block的间隙问题
追问：float同一行需要做什么处理
什么是BFC、怎么实现BFC
DNS怎么理解
IP是多少位二进制？两个IP地址有一个子网掩码，怎么判断是不是处于同一网段
call和apply的区别
a=function b=a 请问a跟b相等吗
追问：如果b=a.bind()呢
http状态码有哪些
追问：304缓存，发get时200（from mememry cache）跟304有什么区别
跨域是什么？对接跨域怎么解决，有几种实现方法
追问：最后一种iframe+document.domain怎么实现
判断arr是不是数组

vue的生命周期
vue的data属性为什么一定要用函数返回对象
js原型链
追问：function的proto指向
追问：Object.prototype.proto指向
代码实现原型链继承
有什么优缺点
数组排序方法


***字节跳动***
vue中父组件传递下来的数据，子组件改变会对父组件视图造成影响吗
vuex里的数据是怎样实现实时更新的
浏览器缓存有哪些。怎么判断缓存过不过期，协商缓存是怎样的，前端怎么知道它过期与否
class做了什么事

promise用法、构造函数、状态
node.js 有任务队列吗？ 事件循环
用promise写一个delay函数
diff 算法
http请求有多少种
详细介绍一下option请求
跨域携带cookie （withCredentials ）
流动布局实现三个div自适应
vue3.0新增了什么
js宽松模式和严格模式区别


HMR 热更替原理
vue如何进行图片压缩
happypack 原理 【多进程打包 又讲了下进程和线程的区别】
讲一下Cookie是Http哪个字段
非对称加密，对称加密
实现拖拽一个元素
浏览器和Node.js如何加载js文件，有什么区别
浏览器对esmodule的兼容性怎么样
元素层叠顺序是如何计算的
对行内元素设置padding，margin有什么效果
百分比padding，margin是根据什么值计算的
display:inline-block元素之间存在间隙，原因及解决方案
display:inline-block元素和父元素上下存在间隙，产生原因及解决方案
cookie如何保存登录状态
cookie有哪些字段
Cache-Control: no-cache / no-store 的区别
+obj是怎么计算的（obj是一个Object）
Nodejs createServer启动HTTP服务端在底层做了哪些事情(****)
如何做TCP拥塞控制 (慢开始算法、拥塞避免算法、快重传算法、快恢复算法)
移动端如何解决图片加载造成的闪动

手写
事件发布模式
实现一个EventListener类，包含on，off，emit方法
二叉树吗、判断一个二叉树中，是否有某条路径的节点和为 n
算法 最大连续子序列和 dp
算法 找二叉树从根节点到叶节点所有路径的总连续和
实现一个链表
手写快排（有延伸）算法 快排 原理和优化 分析复杂度 【手撕代码】
算法 promise封装原生ajax
手写正则表达式判断电话号码 （/^1[3456789]\d{9}$/）
手写斐波那契 递归 动态规划（有延伸）
智力题 狼吃羊
编程：只包含'(', ')', '[', ']', '{', '}' 的字符串，判断是否有效。
算法 找数组里总和大于等于目标值的连续数字合和





//vue HMR热更新介绍
首先，介绍webpack-dev-server:
webpack-dev-server 主要包含了三个部分：
1.webpack: 负责编译代码
2.webpack-dev-middleware: 主要负责构建内存文件系统，把webpack的 OutputFileSystem 替换成 InMemoryFileSystem。同时作为Express的中间件拦截请求，从内存文件系统中把结果拿出来。
3.express：负责搭建请求路由服务。
其次，介绍工作流程:
1.启动dev-server，webpack开始构建，在编译期间会向 entry 文件注入热更新代码；
2.Client 首次打开后，Server 和 Client 基于Socket建立通讯渠道；
3.修改文件，Server 端监听文件发送变动，webpack开始编译，直到编译完成会触发"Done"事件；
4.Server通过socket 发送消息告知 Client；
5.Client根据Server的消息（hash值和state状态），通过ajax请求获取 Server 的manifest描述文件；
6.Client对比当前 modules tree ，再次发请求到 Server 端获取新的JS模块；
7.Client获取到新的JS模块后，会更新 modules tree并替换掉现有的模块；
8.最后调用 module.hot.accept() 完成热更新；